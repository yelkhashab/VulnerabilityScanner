import requests
from bs4 import BeautifulSoup
import random
import time

# List of user agents for rotation to avoid simple user-agent based detection
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Safari/605.1.15",
    # Add more user agents here
]

# Function to make a request with a random user agent
def make_request(url):
    headers = {'User-Agent': random.choice(USER_AGENTS)}
    response = requests.get(url, headers=headers)
    return response

# Function to check for forms in the HTML content (potential targets for SQL injection and XSS)
def scan_forms(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')
    forms = soup.find_all('form')
    return forms

# Function to check for basic misconfigurations like insecure HTTP headers
def check_misconfigurations(response):
    # Example: Check for missing security headers
    headers_to_check = ['Content-Security-Policy', 'X-Frame-Options']
    missing_headers = [header for header in headers_to_check if header not in response.headers]
    return missing_headers

# Main function to scan a single page
def scan_page(url):
    print(f"Scanning {url}")

    # Rate limiting
    time.sleep(1)  # Wait for 1 second before making a request

    # Make a request to the page
    response = make_request(url)

    # Scan for forms
    forms = scan_forms(response.text)
    if forms:
        print(f"Found {len(forms)} forms. Potential for SQL injection or XSS.")
    else:
        print("No forms found.")

    # Check for misconfigurations
    missing_headers = check_misconfigurations(response)
    if missing_headers:
        print(f"Missing security headers: {missing_headers}")
    else:
        print("No missing security headers detected.")

# Example usage
scan_page("https://demo.testfire.net/index.jsp")
